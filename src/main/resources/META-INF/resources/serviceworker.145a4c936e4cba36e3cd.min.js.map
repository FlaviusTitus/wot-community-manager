{"version":3,"file":"serviceworker.145a4c936e4cba36e3cd.min.js","mappings":"mBAAA,MACMA,EAAY,qBAEZC,EAAsB,CAAC,eACvBC,EAAe,CAAC,yBAChBC,EAAc,CAAC,oBAEfC,EAAgB,CAACC,EAAKC,KACxB,IAAI,IAAIC,KAAUD,EACd,GAAsB,iBAAVC,GAAsBA,GAAUF,GAAUE,aAAkBC,QAAUD,EAAOE,KAAKJ,GAC1F,OAAO,EACf,OAAO,CAAK,EAahBK,KAAKC,UAAY,SAAUC,GAC1BA,EAAMC,UACL,iBACOH,KAAKI,qBACSC,OAAOC,KAAKhB,IAC1BiB,OAAOhB,EACb,EAJD,GAMF,EAEAS,KAAKQ,WAAa,SAAUN,GAC3BA,EAAMC,UACL,iBACOH,KAAKS,QAAQC,QAEnB,MAAMC,QAAmBN,OAAOO,aAC1BC,QAAQC,IAAKH,EAAWI,KAAKC,IACjC,GAAIA,GAAa1B,EAChB,OAAOe,OAAOY,OAAOD,EAAU,IAGlC,EATD,GAWF,EAEAhB,KAAKkB,QAAU,SAAUhB,GACxB,MAAMiB,EAAUjB,EAAMiB,QACtBjB,EAAMkB,YAAY,WACZ,IAAIC,QAAiBhB,OAAOiB,MAAMH,GAClC,GAAGE,EACF,OAAOA,EAGP,GADAA,QAAiBE,MAAMJ,GACpBE,EAASG,IAAMH,EAASI,OAAS,KA3CjB,CAACN,IACxB,MAAMxB,EAAMwB,EAAQxB,IACpB,OAAGD,EAAcC,EAAKF,MAEdC,EAAcC,EAAKH,EAGX,EAoC+BkC,CAAmBP,GAAS,CACnE,MAAMQ,QAActB,OAAOC,KAAKhB,GAChC,IACIqC,EAAMC,IAAIT,EAASE,EAASQ,QAChC,CAAE,MAAMC,GACJC,QAAQC,KAAKF,EACjB,CACJ,CAEA,OAAOT,CAEV,EAjBc,GAkBnB,EAGArB,KAAKiC,iBAAiB,WAAW,SAAU/B,GAC1C6B,QAAQG,IAAI,sCAAsChC,EAAMiC,QACxDjC,EAAMkC,MAAM,GAAGC,YAAY,+CAA+CnC,EAAMiC,QACjF,G","sources":["webpack://wot-campa-manager-backend/./client/modules/serviceworker/index.js"],"sourcesContent":["const VERSION = 1;\r\nconst CACHENAME = `wot-clan-manager:${VERSION}`;\r\n\r\nconst INITAL_CACHED_FILES = [\"/index.html\"];\r\nconst ALLOWED_URLS = [\"https?::/localhost/.*\"];\r\nconst DENIED_URLS = [/[^\\/]*\\/api\\.*/ig];\r\n\r\nconst matchByFilter = (url, filters) => {\r\n    for(let filter of filters)\r\n        if( (typeof filter ===\"string\" && filter == url ) || (filter instanceof RegExp && filter.test(url)))\r\n            return true; \r\n    return false;\r\n}\r\n\r\nconst isRequestCacheable = (request) => {\r\n    const url = request.url;\r\n    if(matchByFilter(url, DENIED_URLS))\r\n        return false;\r\n    else if(matchByFilter(url, ALLOWED_URLS))\r\n        return true;\r\n    else\r\n        return false;\r\n};\r\n\r\nself.oninstall = function (event) {\r\n\tevent.waitUntil(\r\n\t\t(async () => {\r\n\t\t\tawait self.skipWaiting();\r\n\t\t\tconst cache = await caches.open(CACHENAME);\r\n\t\t\tcache.addAll(INITAL_CACHED_FILES);\r\n\t\t})(),\r\n\t);\r\n};\r\n\r\nself.onactivate = function (event) {\r\n\tevent.waitUntil(\r\n\t\t(async () => {\r\n\t\t\tawait self.clients.claim();\r\n\r\n\t\t\tconst cachenames = await caches.keys();\r\n\t\t\tawait Promise.all( cachenames.map((cacheName) => {\r\n\t\t\t\t\tif (cacheName != CACHENAME)\r\n\t\t\t\t\t\treturn caches.delete(cacheName);\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t})()\r\n\t);\r\n};\r\n\r\nself.onfetch = function (event) {\r\n\tconst request = event.request;\r\n\tevent.respondWith((async () => {\r\n       let response = await caches.match(request);\r\n       if(response)\r\n        return response;\r\n\r\n        response = await fetch(request);\r\n        if(response.ok && response.status < 300 && isRequestCacheable(request)){\r\n            const cache = await caches.open(CACHENAME);\r\n            try{\r\n                cache.put(request, response.clone());\r\n            } catch(e){\r\n                console.warn(e)\r\n            }\r\n        }\r\n\r\n        return response;\r\n    \r\n    })());\r\n};\r\n\r\n// Communicate via MessageChannel.\r\nself.addEventListener(\"message\", function (event) {\r\n\tconsole.log(`Received message from main thread: ${event.data}`);\r\n\tevent.ports[0].postMessage(`Got message! Sending direct message back - \"${event.data}\"`);\r\n});\r\n\r\n// Broadcast via postMessage.\r\nfunction sendMessage(message) {\r\n\tself.clients.matchAll().then(function (clients) {\r\n\t\tclients.map(function (client) {\r\n\t\t\treturn client.postMessage(message);\r\n\t\t});\r\n\t});\r\n}\r\n"],"names":["CACHENAME","INITAL_CACHED_FILES","ALLOWED_URLS","DENIED_URLS","matchByFilter","url","filters","filter","RegExp","test","self","oninstall","event","waitUntil","skipWaiting","caches","open","addAll","onactivate","clients","claim","cachenames","keys","Promise","all","map","cacheName","delete","onfetch","request","respondWith","response","match","fetch","ok","status","isRequestCacheable","cache","put","clone","e","console","warn","addEventListener","log","data","ports","postMessage"],"sourceRoot":""}